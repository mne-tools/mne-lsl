
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated/tutorials/20_player_annotations.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_generated_tutorials_20_player_annotations.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_tutorials_20_player_annotations.py:


.. _tut-player-annotations:

Player with annotations
=======================

.. include:: ./../../links.inc

:class:`~mne.Annotations` from a :class:`~mne.io.Raw` object can be streamed as an event
stream by :class:`~mne_lsl.player.PlayerLSL`. The stream will be irregularly sampled,
numerical, and of type ``'annotations'``.

A :class:`~mne.Annotations` contain 3 information:

- the onset of the annotation
- the duration of the annotation
- the description of the annotation

To stream all 3 information, it's duration-hod encoded along the channels. For instance,
consider a :class:`~mne.io.Raw` object with 3 different :class:`~mne.Annotations`
description: ``'event1'``, ``'event2'``, and ``'event3'``. The event stream will have 3
channels, each corresponding to one of the 3 descriptions. When an annotation is
streamed, it's duration is encoded as the value on its channel while the other channels
remain to zero.

.. GENERATED FROM PYTHON SOURCE LINES 26-47

.. code-block:: Python



    import uuid

    import matplotlib.patches as mpatches
    import numpy as np
    from matplotlib import pyplot as plt
    from mne import Annotations, create_info
    from mne.io import RawArray
    from mne.viz import set_browser_backend

    from mne_lsl.player import PlayerLSL
    from mne_lsl.stream import StreamLSL

    annotations = Annotations(
        onset=[1, 2, 3],
        duration=[0.1, 0.2, 0.3],
        description=["event1", "event2", "event3"],
    )
    annotations





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Annotations | 3 segments: event1 (1), event2 (1), event3 (1)>



.. GENERATED FROM PYTHON SOURCE LINES 49-69

With the 3 annotations above, the event stream will stream the following samples:

- at time ``1``, the annotation ``'event1'`` is pushed. The sample push is
  ``array([[0.1, 0, 0]])``, of shape (1, 3).
- at time ``2``, the annotation ``'event2'`` is pushed. The sample push is
  ``array([[0, 0.2, 0]])``, of shape (1, 3).
- at time ``3``, the annotation ``'event3'`` is pushed. The sample push is
  ``array([[0, 0, 0.3]])``, of shape (1, 3).

If more than one annotations are present in the chunk currently pushed, then a chunk
is pushed. For instance, if the annotations at time ``2`` and ``3`` are pushed at the
same time, then the chunk push is ``array([[0., 0.2., 0.], [0., 0., 0.3]])``, of shape
(2, 3).

%%
Example on mock signal
----------------------

Let's create a mock :class:`~mne.io.Raw` object with annotations and stream both the
signal and the annotations.

.. GENERATED FROM PYTHON SOURCE LINES 69-81

.. code-block:: Python


    data = np.zeros((1, 1000))  # 1 channel, 1000 samples
    data[0, 100:200] = 1
    data[0, 500:700] = 2
    info = create_info(["signal"], 1000, "misc")
    raw = RawArray(data, info)
    annotations = Annotations(onset=[0.1, 0.5], duration=[0.1, 0.2], description=["1", "2"])
    raw.set_annotations(annotations)
    set_browser_backend("matplotlib")  # easier to plot with matplotlib in a documentation
    raw.plot(scalings=dict(misc=2), show_scrollbars=False, show_scalebars=False)
    plt.show()




.. image-sg:: /generated/tutorials/images/sphx_glr_20_player_annotations_001.png
   :alt: 20 player annotations
   :srcset: /generated/tutorials/images/sphx_glr_20_player_annotations_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 82-95

Now that we have the :class:`~mne.io.Raw` object, we can stream it with a
:class:`~mne_lsl.player.PlayerLSL` object.

.. note::

    Note that forcing ``annotations=True`` is not necessary since the
    :class:`~mne_lsl.player.PlayerLSL` will automatically stream annotations if they
    are present in the :class:`~mne.io.Raw` object.

.. note::

    A ``chunk_size`` of 1 is needed here or the timestamps ``ts`` from the signal and
    annotations streams are not reliable enough.

.. GENERATED FROM PYTHON SOURCE LINES 95-105

.. code-block:: Python


    source_id = uuid.uuid4().hex
    player = PlayerLSL(
        raw,
        chunk_size=1,
        name="tutorial-annots",
        source_id=source_id,
        annotations=True,
    ).start()








.. GENERATED FROM PYTHON SOURCE LINES 106-107

We can now acquire both streams with 2 :class:`~mne_lsl.stream.StreamLSL` objects.

.. GENERATED FROM PYTHON SOURCE LINES 107-112

.. code-block:: Python


    stream = StreamLSL(2, name="tutorial-annots", source_id=source_id)
    stream.connect(acquisition_delay=0.1, processing_flags="all")
    stream.info






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <script type="text/javascript">
        const toggleVisibility = (className) => {

      const elements = document.querySelectorAll(`.${className}`)

      elements.forEach(element => {
        if (element.classList.contains('repr-section-header')) {
          // Don't collapse the section header row.
           return
        }
        if (element.classList.contains('repr-element-collapsed')) {
          // Force a reflow to ensure the display change takes effect before removing the class
          element.classList.remove('repr-element-collapsed')
          element.offsetHeight // This forces the browser to recalculate layout
          element.classList.remove('repr-element-faded')
        } else {
          // Start transition to hide the element
          element.classList.add('repr-element-faded')
          element.addEventListener('transitionend', handler = (e) => {
            if (e.propertyName === 'opacity' && getComputedStyle(element).opacity === '0.2') {
              element.classList.add('repr-element-collapsed')
              element.removeEventListener('transitionend', handler)
            }
          });
        }
      });

      // Take care of button (adjust caret)
      const button = document.querySelectorAll(`.repr-section-header.${className} > th.repr-section-toggle-col > button`)[0]
      button.classList.toggle('collapsed')

      // Take care of the tooltip of the section header row
      const sectionHeaderRow = document.querySelectorAll(`tr.repr-section-header.${className}`)[0]
      sectionHeaderRow.classList.toggle('collapsed')
      sectionHeaderRow.title = sectionHeaderRow.title === 'Hide section' ? 'Show section' : 'Hide section'
    }
    </script>

    <style type="text/css">
        table.repr.table.table-hover.table-striped.table-sm.table-responsive.small {
      /* Don't make rows wider than they need to be. */
      display: inline;
    }

    table > tbody > tr.repr-element > td {
      /* Apply a tighter layout to the table cells. */
      padding-top: 0.1rem;
      padding-bottom: 0.1rem;
      padding-right: 1rem;
    }

    table > tbody > tr > td.repr-section-toggle-col {
      /* Remove background and border of the first cell in every row
         (this row is only used for the collapse / uncollapse caret)

         TODO: Need to find a good solution for VS Code that works in both
               light and dark mode. */
      border-color: transparent;
      --bs-table-accent-bg: transparent;
    }

    tr.repr-section-header {
      /* Remove stripes from section header rows */
      background-color: transparent;
      border-color: transparent;
      --bs-table-striped-bg: transparent;
      cursor: pointer;
    }

    tr.repr-section-header > th {
      text-align: left !important;
      vertical-align: middle;
    }

    .repr-element, tr.repr-element > td {
      opacity: 1;
      text-align: left !important;
    }

    .repr-element-faded {
      transition: 0.3s ease;
      opacity: 0.2;
    }

    .repr-element-collapsed {
      display: none;
    }

    /* Collapse / uncollapse button and the caret it contains. */
    .repr-section-toggle-col button {
      cursor: pointer;
      width: 1rem;
      background-color: transparent;
      border-color: transparent;
    }

    span.collapse-uncollapse-caret {
      width: 1rem;
      height: 1rem;
      display: block;
      background-repeat: no-repeat;
      background-position: left;
      background-size: contain;
    }

    /* The collapse / uncollapse carets were copied from the free Font Awesome collection and adjusted. */

    /* Default to black carets for light mode */
    .repr-section-toggle-col > button.collapsed > span.collapse-uncollapse-caret {
      background-image: url('data:image/svg+xml;charset=utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="black" d="M246.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-128-128c-9.2-9.2-22.9-11.9-34.9-6.9s-19.8 16.6-19.8 29.6l0 256c0 12.9 7.8 24.6 19.8 29.6s25.7 2.2 34.9-6.9l128-128z"/></svg>');
    }

    .repr-section-toggle-col
      > button:not(.collapsed)
      > span.collapse-uncollapse-caret {
      background-image: url('data:image/svg+xml;charset=utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="black" d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z"/></svg>');
    }

    /* Use white carets for dark mode */
    @media (prefers-color-scheme: dark) {
      .repr-section-toggle-col > button.collapsed > span.collapse-uncollapse-caret {
        background-image: url('data:image/svg+xml;charset=utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="white" d="M246.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-128-128c-9.2-9.2-22.9-11.9-34.9-6.9s-19.8 16.6-19.8 29.6l0 256c0 12.9 7.8 24.6 19.8 29.6s25.7 2.2 34.9-6.9l128-128z"/></svg>');
      }

      .repr-section-toggle-col
        > button:not(.collapsed)
        > span.collapse-uncollapse-caret {
        background-image: url('data:image/svg+xml;charset=utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="white" d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z"/></svg>');
      }
    }

    .channel-names-btn {
      padding: 0;
      border: none;
      background: none;
      text-decoration: underline;
      text-decoration-style: dashed;
      cursor: pointer;
      color: #0d6efd;
    }

    .channel-names-btn:hover {
      color: #0a58ca;
    }
    </style>



    <table class="repr table table-hover table-striped table-sm table-responsive small">
    







    <tr class="repr-section-header general-70ae280a-4ed2-4f34-b8de-ac633807d19d"  title="Hide section" 
        onclick="toggleVisibility('general-70ae280a-4ed2-4f34-b8de-ac633807d19d')">
        <th class="repr-section-toggle-col">
            <button>
            
                <span class="collapse-uncollapse-caret"></span>
            </button>
        </th>
        <th colspan="2">
            <strong>General</strong>
        </th>
    </tr>

    <tr class="repr-element general-70ae280a-4ed2-4f34-b8de-ac633807d19d ">
        <td class="repr-section-toggle-col"></td>
        <td>MNE object type</td>
        <td>Info</td>
    </tr>
    <tr class="repr-element general-70ae280a-4ed2-4f34-b8de-ac633807d19d ">
        <td class="repr-section-toggle-col"></td>
        <td>Measurement date</td>
    
        <td>Unknown</td>
    
    </tr>
    <tr class="repr-element general-70ae280a-4ed2-4f34-b8de-ac633807d19d ">
        <td class="repr-section-toggle-col"></td>
        <td>Participant</td>
    
        <td>Unknown</td>
    
    </tr>
    <tr class="repr-element general-70ae280a-4ed2-4f34-b8de-ac633807d19d ">
        <td class="repr-section-toggle-col"></td>
        <td>Experimenter</td>
    
        <td>Unknown</td>
    
    </tr>
    







    <tr class="repr-section-header acquisition-5532dab5-301e-4a3c-b949-0257ce0ebce8" 
        title="Hide section"  onclick="toggleVisibility('acquisition-5532dab5-301e-4a3c-b949-0257ce0ebce8')">
        <th class="repr-section-toggle-col">
            <button>
            
                <span class="collapse-uncollapse-caret"></span>
            </button>
        </th>
        <th colspan="2">
            <strong>Acquisition</strong>
        </th>
    </tr>








    <tr class="repr-element acquisition-5532dab5-301e-4a3c-b949-0257ce0ebce8 ">
        <td class="repr-section-toggle-col"></td>
        <td>Sampling frequency</td>
        <td>1000.00 Hz</td>
    </tr>



    







    <tr class="repr-section-header channels-2bf21e5c-a552-4d51-b236-af7a1719965e"  title="Hide section" 
        onclick="toggleVisibility('channels-2bf21e5c-a552-4d51-b236-af7a1719965e')">
        <th class="repr-section-toggle-col">
            <button>
            
                <span class="collapse-uncollapse-caret"></span>
            </button>
        </th>
        <th colspan="2">
            <strong>Channels</strong>
        </th>
    </tr>


    <tr class="repr-element channels-2bf21e5c-a552-4d51-b236-af7a1719965e ">
        <td class="repr-section-toggle-col"></td>
        <td>misc</td>
        <td>
            <button class="channel-names-btn" onclick="alert('Good misc:\n\nsignal')" title="(Click to open in popup)&#13;&#13;signal">
                1
            </button>

        
        </td>
    </tr>


    <tr class="repr-element channels-2bf21e5c-a552-4d51-b236-af7a1719965e ">
        <td class="repr-section-toggle-col"></td>
        <td>Head & sensor digitization</td>
    
        <td>Not available</td>
    
    </tr>
    







    <tr class="repr-section-header filters-2ae962e4-bece-4f73-b5d6-caeabcd828a5"  title="Hide section" 
        onclick="toggleVisibility('filters-2ae962e4-bece-4f73-b5d6-caeabcd828a5')">
        <th class="repr-section-toggle-col">
            <button>
            
                <span class="collapse-uncollapse-caret"></span>
            </button>
        </th>
        <th colspan="2">
            <strong>Filters</strong>
        </th>
    </tr>

    <tr class="repr-element filters-2ae962e4-bece-4f73-b5d6-caeabcd828a5 ">
        <td class="repr-section-toggle-col"></td>
        <td>Highpass</td>
        <td>0.00 Hz</td>
    </tr>


    <tr class="repr-element filters-2ae962e4-bece-4f73-b5d6-caeabcd828a5 ">
        <td class="repr-section-toggle-col"></td>
        <td>Lowpass</td>
        <td>500.00 Hz</td>
    </tr>


    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 113-118

.. code-block:: Python


    stream_annotations = StreamLSL(2, stype="annotations", source_id=source_id)
    stream_annotations.connect(acquisition_delay=0.1, processing_flags="all")
    stream_annotations.info






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <script type="text/javascript">
        const toggleVisibility = (className) => {

      const elements = document.querySelectorAll(`.${className}`)

      elements.forEach(element => {
        if (element.classList.contains('repr-section-header')) {
          // Don't collapse the section header row.
           return
        }
        if (element.classList.contains('repr-element-collapsed')) {
          // Force a reflow to ensure the display change takes effect before removing the class
          element.classList.remove('repr-element-collapsed')
          element.offsetHeight // This forces the browser to recalculate layout
          element.classList.remove('repr-element-faded')
        } else {
          // Start transition to hide the element
          element.classList.add('repr-element-faded')
          element.addEventListener('transitionend', handler = (e) => {
            if (e.propertyName === 'opacity' && getComputedStyle(element).opacity === '0.2') {
              element.classList.add('repr-element-collapsed')
              element.removeEventListener('transitionend', handler)
            }
          });
        }
      });

      // Take care of button (adjust caret)
      const button = document.querySelectorAll(`.repr-section-header.${className} > th.repr-section-toggle-col > button`)[0]
      button.classList.toggle('collapsed')

      // Take care of the tooltip of the section header row
      const sectionHeaderRow = document.querySelectorAll(`tr.repr-section-header.${className}`)[0]
      sectionHeaderRow.classList.toggle('collapsed')
      sectionHeaderRow.title = sectionHeaderRow.title === 'Hide section' ? 'Show section' : 'Hide section'
    }
    </script>

    <style type="text/css">
        table.repr.table.table-hover.table-striped.table-sm.table-responsive.small {
      /* Don't make rows wider than they need to be. */
      display: inline;
    }

    table > tbody > tr.repr-element > td {
      /* Apply a tighter layout to the table cells. */
      padding-top: 0.1rem;
      padding-bottom: 0.1rem;
      padding-right: 1rem;
    }

    table > tbody > tr > td.repr-section-toggle-col {
      /* Remove background and border of the first cell in every row
         (this row is only used for the collapse / uncollapse caret)

         TODO: Need to find a good solution for VS Code that works in both
               light and dark mode. */
      border-color: transparent;
      --bs-table-accent-bg: transparent;
    }

    tr.repr-section-header {
      /* Remove stripes from section header rows */
      background-color: transparent;
      border-color: transparent;
      --bs-table-striped-bg: transparent;
      cursor: pointer;
    }

    tr.repr-section-header > th {
      text-align: left !important;
      vertical-align: middle;
    }

    .repr-element, tr.repr-element > td {
      opacity: 1;
      text-align: left !important;
    }

    .repr-element-faded {
      transition: 0.3s ease;
      opacity: 0.2;
    }

    .repr-element-collapsed {
      display: none;
    }

    /* Collapse / uncollapse button and the caret it contains. */
    .repr-section-toggle-col button {
      cursor: pointer;
      width: 1rem;
      background-color: transparent;
      border-color: transparent;
    }

    span.collapse-uncollapse-caret {
      width: 1rem;
      height: 1rem;
      display: block;
      background-repeat: no-repeat;
      background-position: left;
      background-size: contain;
    }

    /* The collapse / uncollapse carets were copied from the free Font Awesome collection and adjusted. */

    /* Default to black carets for light mode */
    .repr-section-toggle-col > button.collapsed > span.collapse-uncollapse-caret {
      background-image: url('data:image/svg+xml;charset=utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="black" d="M246.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-128-128c-9.2-9.2-22.9-11.9-34.9-6.9s-19.8 16.6-19.8 29.6l0 256c0 12.9 7.8 24.6 19.8 29.6s25.7 2.2 34.9-6.9l128-128z"/></svg>');
    }

    .repr-section-toggle-col
      > button:not(.collapsed)
      > span.collapse-uncollapse-caret {
      background-image: url('data:image/svg+xml;charset=utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="black" d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z"/></svg>');
    }

    /* Use white carets for dark mode */
    @media (prefers-color-scheme: dark) {
      .repr-section-toggle-col > button.collapsed > span.collapse-uncollapse-caret {
        background-image: url('data:image/svg+xml;charset=utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="white" d="M246.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-128-128c-9.2-9.2-22.9-11.9-34.9-6.9s-19.8 16.6-19.8 29.6l0 256c0 12.9 7.8 24.6 19.8 29.6s25.7 2.2 34.9-6.9l128-128z"/></svg>');
      }

      .repr-section-toggle-col
        > button:not(.collapsed)
        > span.collapse-uncollapse-caret {
        background-image: url('data:image/svg+xml;charset=utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="white" d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z"/></svg>');
      }
    }

    .channel-names-btn {
      padding: 0;
      border: none;
      background: none;
      text-decoration: underline;
      text-decoration-style: dashed;
      cursor: pointer;
      color: #0d6efd;
    }

    .channel-names-btn:hover {
      color: #0a58ca;
    }
    </style>



    <table class="repr table table-hover table-striped table-sm table-responsive small">
    







    <tr class="repr-section-header general-d79500f9-6747-452a-a1e7-e4de3dc2c142"  title="Hide section" 
        onclick="toggleVisibility('general-d79500f9-6747-452a-a1e7-e4de3dc2c142')">
        <th class="repr-section-toggle-col">
            <button>
            
                <span class="collapse-uncollapse-caret"></span>
            </button>
        </th>
        <th colspan="2">
            <strong>General</strong>
        </th>
    </tr>

    <tr class="repr-element general-d79500f9-6747-452a-a1e7-e4de3dc2c142 ">
        <td class="repr-section-toggle-col"></td>
        <td>MNE object type</td>
        <td>Info</td>
    </tr>
    <tr class="repr-element general-d79500f9-6747-452a-a1e7-e4de3dc2c142 ">
        <td class="repr-section-toggle-col"></td>
        <td>Measurement date</td>
    
        <td>Unknown</td>
    
    </tr>
    <tr class="repr-element general-d79500f9-6747-452a-a1e7-e4de3dc2c142 ">
        <td class="repr-section-toggle-col"></td>
        <td>Participant</td>
    
        <td>Unknown</td>
    
    </tr>
    <tr class="repr-element general-d79500f9-6747-452a-a1e7-e4de3dc2c142 ">
        <td class="repr-section-toggle-col"></td>
        <td>Experimenter</td>
    
        <td>Unknown</td>
    
    </tr>
    







    <tr class="repr-section-header acquisition-b67f96cb-7306-46f2-9517-29481d74043b" 
        title="Hide section"  onclick="toggleVisibility('acquisition-b67f96cb-7306-46f2-9517-29481d74043b')">
        <th class="repr-section-toggle-col">
            <button>
            
                <span class="collapse-uncollapse-caret"></span>
            </button>
        </th>
        <th colspan="2">
            <strong>Acquisition</strong>
        </th>
    </tr>








    <tr class="repr-element acquisition-b67f96cb-7306-46f2-9517-29481d74043b ">
        <td class="repr-section-toggle-col"></td>
        <td>Sampling frequency</td>
        <td>0.00 Hz</td>
    </tr>



    







    <tr class="repr-section-header channels-56cd699a-0efa-44c4-8e46-67ec3e10b830"  title="Hide section" 
        onclick="toggleVisibility('channels-56cd699a-0efa-44c4-8e46-67ec3e10b830')">
        <th class="repr-section-toggle-col">
            <button>
            
                <span class="collapse-uncollapse-caret"></span>
            </button>
        </th>
        <th colspan="2">
            <strong>Channels</strong>
        </th>
    </tr>


    <tr class="repr-element channels-56cd699a-0efa-44c4-8e46-67ec3e10b830 ">
        <td class="repr-section-toggle-col"></td>
        <td>misc</td>
        <td>
            <button class="channel-names-btn" onclick="alert('Good misc:\n\n1, 2')" title="(Click to open in popup)&#13;&#13;1, 2">
                2
            </button>

        
        </td>
    </tr>


    <tr class="repr-element channels-56cd699a-0efa-44c4-8e46-67ec3e10b830 ">
        <td class="repr-section-toggle-col"></td>
        <td>Head & sensor digitization</td>
    
        <td>Not available</td>
    
    </tr>
    







    <tr class="repr-section-header filters-d35899e0-962a-48b2-98da-2d43bf743a97"  title="Hide section" 
        onclick="toggleVisibility('filters-d35899e0-962a-48b2-98da-2d43bf743a97')">
        <th class="repr-section-toggle-col">
            <button>
            
                <span class="collapse-uncollapse-caret"></span>
            </button>
        </th>
        <th colspan="2">
            <strong>Filters</strong>
        </th>
    </tr>

    <tr class="repr-element filters-d35899e0-962a-48b2-98da-2d43bf743a97 ">
        <td class="repr-section-toggle-col"></td>
        <td>Highpass</td>
        <td>0.00 Hz</td>
    </tr>


    <tr class="repr-element filters-d35899e0-962a-48b2-98da-2d43bf743a97 ">
        <td class="repr-section-toggle-col"></td>
        <td>Lowpass</td>
        <td>0.00 Hz</td>
    </tr>


    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 119-121

We can now acquire new samples from both streams and create a matplotlib figure to
plot the signal and the annotations in real-time.

.. GENERATED FROM PYTHON SOURCE LINES 121-160

.. code-block:: Python


    if not plt.isinteractive():
        plt.ion()
    fig, ax = plt.subplots()
    # add legend
    colors = ["lightcoral", "lightgreen"]
    patches = [
        mpatches.Patch(color=colors[k], label=ch, alpha=0.5)
        for k, ch in enumerate(stream_annotations.ch_names)
    ]
    ax.legend(handles=patches, loc="upper left")
    plt.show()

    n = 0  # number of annotations
    while n <= 10:
        if stream.n_new_samples == 0:
            continue

        data, ts = stream.get_data(winsize=stream.n_new_samples / stream.info["sfreq"])
        ax.plot(ts, data.squeeze(), color="teal")

        if stream_annotations.n_new_samples != 0:
            data_annotations, ts_annotations = stream_annotations.get_data(
                winsize=stream_annotations.n_new_samples
            )
            for sample, time in zip(data_annotations.T, ts_annotations, strict=True):
                k = np.where(sample != 0)[0][0]  # find the annotation
                ax.axvspan(
                    time,
                    time + sample[k],
                    label=stream_annotations.ch_names[k],
                    color=colors[k],
                    alpha=0.5,
                )
            n += 1

        fig.canvas.draw()
        fig.canvas.flush_events()




.. image-sg:: /generated/tutorials/images/sphx_glr_20_player_annotations_002.png
   :alt: 20 player annotations
   :srcset: /generated/tutorials/images/sphx_glr_20_player_annotations_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 161-168

Free resources
--------------

When you are done with a :class:`~mne_lsl.player.PlayerLSL`, a
:class:`~mne_lsl.stream.StreamLSL` or a :class:`~mne_lsl.stream.EpochsStream` don't
forget to free the resources they use to continuously mock an LSL stream or
receive new data from an LSL stream.

.. GENERATED FROM PYTHON SOURCE LINES 168-171

.. code-block:: Python


    stream.disconnect()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Stream: OFF | tutorial-annots (source: 9fe7a73005514b2faf3ffde30b960bc2)>



.. GENERATED FROM PYTHON SOURCE LINES 172-175

.. code-block:: Python


    stream_annotations.disconnect()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Stream: OFF | tutorial-annots-annotations (source: 9fe7a73005514b2faf3ffde30b960bc2)>



.. GENERATED FROM PYTHON SOURCE LINES 176-178

.. code-block:: Python


    player.stop()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Player: tutorial-annots | OFF>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 10.199 seconds)

**Estimated memory usage:**  195 MB


.. _sphx_glr_download_generated_tutorials_20_player_annotations.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 20_player_annotations.ipynb <20_player_annotations.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 20_player_annotations.py <20_player_annotations.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 20_player_annotations.zip <20_player_annotations.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
