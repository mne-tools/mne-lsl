
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated/tutorials/10_low_level_API.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_generated_tutorials_10_low_level_API.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_tutorials_10_low_level_API.py:


.. _tut-low-level-api:

Low-level LSL API
=================

.. include:: ./../../links.inc

LSL is a library designed for streaming time series data across different platforms and
programming languages. The `core library <lsl lib_>`_ is primarily written in C++, and
bindings are accessible for Python, C#, Java, MATLAB, and Unity, among others. You can
find a comprehensive list `here <lsl language bindings_>`_.

MNE-LSL provides a reimplementation of the `python binding <lsl python_>`_, known as
``pylsl``, within the ``mne_lsl.lsl`` module. It introduces additional functionalities
to simplify the low-level interaction with LSL streams. Moreover, it enhances the
detection of liblsl on your system and can retrieve a compatible version online if
necessary. The differences between ``pylsl`` and ``mne_lsl.lsl`` are detailed
:ref:`here<resources/pylsl:Differences with pylsl>`.

.. GENERATED FROM PYTHON SOURCE LINES 21-36

.. code-block:: Python



    import time
    import uuid

    import numpy as np

    from mne_lsl.lsl import (
        StreamInfo,
        StreamInlet,
        StreamOutlet,
        local_clock,
        resolve_streams,
    )








.. GENERATED FROM PYTHON SOURCE LINES 38-46

Creating a stream
-----------------

To create a stream, you must first define its properties. This is achieved by creating
a :class:`~mne_lsl.lsl.StreamInfo` object, which specifies the stream's name, type,
source and properties. Convenience methods are available to set the channel
properties, including :meth:`~mne_lsl.lsl.StreamInfo.set_channel_info`, which uses a
:class:`mne.Info` object as source.

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: Python


    sinfo = StreamInfo(
        name="my-stream",
        stype="eeg",
        n_channels=3,
        sfreq=1024,
        dtype="float32",
        source_id=uuid.uuid4().hex,
    )
    sinfo.set_channel_names(["Fz", "Cz", "Oz"])
    sinfo.set_channel_types("eeg")
    sinfo.set_channel_units("microvolts")








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Once the :class:`~mne_lsl.lsl.StreamInfo` object is created, a
:class:`~mne_lsl.lsl.StreamOutlet` can be instantiated to create the stream.

.. GENERATED FROM PYTHON SOURCE LINES 62-65

.. code-block:: Python


    outlet = StreamOutlet(sinfo)








.. GENERATED FROM PYTHON SOURCE LINES 66-77

Discover streams
----------------

At this point, the :class:`~mne_lsl.lsl.StreamOutlet` is available on the network. The
function :func:`~mne_lsl.lsl.resolve_streams` discovers all available streams on the
network. This operation is commonly named the stream resolution.

.. note::

    The stream resolution can be restricted by providing the ``name``, ``stype``, and
    ``source_id`` arguments.

.. GENERATED FROM PYTHON SOURCE LINES 77-82

.. code-block:: Python


    streams = resolve_streams()
    assert len(streams) == 1
    streams[0]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    < sInfo 'my-stream' >
      | Type: eeg
      | Sampling: 1024.0 Hz
      | Number of channels: 3
      | Data type: <class 'numpy.float32'>
      | Source: 40b67758db024e148d02396bae3f0411




.. GENERATED FROM PYTHON SOURCE LINES 83-86

The resolution retrieves only the stream basic properties. The channel properties,
stored in the stream description in an XML element tree, are absent from a
:class:`~mne_lsl.lsl.StreamInfo` returned by the resolution function.

.. GENERATED FROM PYTHON SOURCE LINES 86-89

.. code-block:: Python


    assert streams[0].get_channel_names() is None








.. GENERATED FROM PYTHON SOURCE LINES 90-97

Connect to a Stream
-------------------

To connect to a stream, a :class:`~mne_lsl.lsl.StreamInlet` object must be created
using the resolved :class:`~mne_lsl.lsl.StreamInfo`. Once the stream is opened with
:meth:`~mne_lsl.lsl.StreamInlet.open_stream`, the connection is established and
both the properties and data become available.

.. GENERATED FROM PYTHON SOURCE LINES 97-102

.. code-block:: Python


    inlet = StreamInlet(streams[0])
    inlet.open_stream()
    sinfo = inlet.get_sinfo()  # retrieve stream information with all properties








.. GENERATED FROM PYTHON SOURCE LINES 103-106

.. code-block:: Python


    sinfo.get_channel_names()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ['Fz', 'Cz', 'Oz']



.. GENERATED FROM PYTHON SOURCE LINES 107-110

.. code-block:: Python


    sinfo.get_channel_types()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ['eeg', 'eeg', 'eeg']



.. GENERATED FROM PYTHON SOURCE LINES 111-114

.. code-block:: Python


    sinfo.get_channel_units()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ['microvolts', 'microvolts', 'microvolts']



.. GENERATED FROM PYTHON SOURCE LINES 115-119

An :class:`mne.Info` can be obtained directly with
:meth:`~mne_lsl.lsl.StreamInfo.get_channel_info`. If the information contained in the
XML element tree can not be parsed, default values are used. For instance, the channel
names are replaced by the channel numbers similarly to :func:`mne.create_info`.

.. GENERATED FROM PYTHON SOURCE LINES 119-122

.. code-block:: Python


    sinfo.get_channel_info()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <script type="text/javascript">
        // must be `var` (not `const`) because this can get embedded multiple times on a page
    var toggleVisibility = (className) => {

        const elements = document.querySelectorAll(`.${className}`);

        elements.forEach(element => {
            if (element.classList.contains("mne-repr-section-header")) {
                return  // Don't collapse the section header row
            }
            element.classList.toggle("mne-repr-collapsed");
        });

        // trigger caret to rotate
        var sel = `.mne-repr-section-header.${className} > th.mne-repr-section-toggle > button`;
        const button = document.querySelector(sel);
        button.classList.toggle("collapsed");

        // adjust tooltip
        sel = `tr.mne-repr-section-header.${className}`;
        const secHeadRow = document.querySelector(sel);
        secHeadRow.classList.toggle("collapsed");
        secHeadRow.title = secHeadRow.title === "Hide section" ? "Show section" : "Hide section";
    }
    </script>

    <style type="text/css">
        /*
    Styles in this section apply both to the sphinx-built website docs and to notebooks
    rendered in an IDE or in Jupyter. In our web docs, styles here are complemented by
    doc/_static/styles.css and other CSS files (e.g. from the sphinx theme, sphinx-gallery,
    or bootstrap). In IDEs/Jupyter, those style files are unavailable, so only the rules in
    this file apply (plus whatever default styling the IDE applies).
    */
    .mne-repr-table {
        display: inline;  /* prevent using full container width */
    }
    .mne-repr-table tr.mne-repr-section-header > th {
        padding-top: 1rem;
        text-align: left;
        vertical-align: middle;
    }
    .mne-repr-section-toggle > button {
        all: unset;
        display: block;
        height: 1rem;
        width: 1rem;
    }
    .mne-repr-section-toggle > button > svg {
        height: 60%;
    }

    /* transition (rotation) effects on the collapser button */
    .mne-repr-section-toggle > button.collapsed > svg {
        transition: 0.1s ease-out;
        transform: rotate(-90deg);
    }
    .mne-repr-section-toggle > button:not(.collapsed) > svg {
        transition: 0.1s ease-out;
        transform: rotate(0deg);
    }

    /* hide collapsed table rows */
    .mne-repr-collapsed {
        display: none;
    }


    @layer {
        /*
        Selectors in a `@layer` will always be lower-precedence than selectors outside the
        layer. So even though e.g. `div.output_html` is present in the sphinx-rendered
        website docs, the styles here won't take effect there as long as some other rule
        somewhere in the page's CSS targets the same element.

        In IDEs or Jupyter notebooks, though, the CSS files from the sphinx theme,
        sphinx-gallery, and bootstrap are unavailable, so these styles will apply.

        Notes:

        - the selector `.accordion-body` is for MNE Reports
        - the selector `.output_html` is for VSCode's notebook interface
        - the selector `.jp-RenderedHTML` is for Jupyter notebook
        - variables starting with `--theme-` are VSCode-specific.
        - variables starting with `--jp-` are Jupyter styles, *some of which* are also
          available in VSCode. Here we try the `--theme-` variable first, then fall back to
          the `--jp-` ones.
        */
        .mne-repr-table {
            --mne-toggle-color: var(--theme-foreground, var(--jp-ui-font-color1));
            --mne-button-bg-color: var(--theme-button-background, var(--jp-info-color0, var(--jp-content-link-color)));
            --mne-button-fg-color: var(--theme-button-foreground, var(--jp-ui-inverse-font-color0, var(--jp-editor-background)));
            --mne-button-hover-bg-color: var(--theme-button-hover-background, var(--jp-info-color1));
            --mne-button-radius: var(--jp-border-radius, 0.25rem);
        }
        /* chevron position/alignment; in VSCode it looks ok without adjusting */
        .accordion-body .mne-repr-section-toggle > button,
        .jp-RenderedHTML .mne-repr-section-toggle > button {
            padding: 0 0 45% 25% !important;
        }
        /* chevron color; MNE Report doesn't have light/dark mode */
        div.output_html .mne-repr-section-toggle > button > svg > path,
        .jp-RenderedHTML .mne-repr-section-toggle > button > svg > path {
            fill: var(--mne-toggle-color);
        }
        .accordion-body .mne-ch-names-btn,
        div.output_html .mne-ch-names-btn,
        .jp-RenderedHTML .mne-ch-names-btn {
            -webkit-border-radius: var(--mne-button-radius);
            -moz-border-radius: var(--mne-button-radius);
            border-radius: var(--mne-button-radius);
            border: none;
            background-image: none;
            background-color: var(--mne-button-bg-color);
            color: var(--mne-button-fg-color);
            font-size: inherit;
            min-width: 1.5rem;
            padding: 0.25rem;
            text-align: center;
            text-decoration: none;
        }
        .accordion-body .mne-ch-names-btn:hover,
        div.output_html .mne.ch-names-btn:hover,
        .jp-RenderedHTML .mne-ch-names-btn:hover {
            background-color: var(--mne-button-hover-bg-color);
            text-decoration: underline;
        }
        .accordion-body .mne-ch-names-btn:focus-visible,
        div.output_html .mne-ch-names-btn:focus-visible,
        .jp-RenderedHTML .mne-ch-names-btn:focus-visible {
            outline: 0.1875rem solid var(--mne-button-bg-color) !important;
            outline-offset: 0.1875rem !important;
        }
    }
    </style>



    <table class="table mne-repr-table">
    







    <tr class="mne-repr-section-header general-a3cefade-1060-4c18-a499-9106966a2dd4"
         title="Hide section" 
        onclick="toggleVisibility('general-a3cefade-1060-4c18-a499-9106966a2dd4')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>General</strong>
        </th>
    </tr>


    <tr class="repr-element general-a3cefade-1060-4c18-a499-9106966a2dd4 ">
        <td class="mne-repr-section-toggle"></td>
        <td>MNE object type</td>
        <td>Info</td>
    </tr>
    <tr class="repr-element general-a3cefade-1060-4c18-a499-9106966a2dd4 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Measurement date</td>
    
        <td>Unknown</td>
    
    </tr>
    <tr class="repr-element general-a3cefade-1060-4c18-a499-9106966a2dd4 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Participant</td>
    
        <td>Unknown</td>
    
    </tr>
    <tr class="repr-element general-a3cefade-1060-4c18-a499-9106966a2dd4 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Experimenter</td>
    
        <td>Unknown</td>
    
    </tr>
    







    <tr class="mne-repr-section-header acquisition-e517ec6e-d960-4f3d-a71c-7d82255408a1"
         title="Hide section" 
        onclick="toggleVisibility('acquisition-e517ec6e-d960-4f3d-a71c-7d82255408a1')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>Acquisition</strong>
        </th>
    </tr>









    <tr class="repr-element acquisition-e517ec6e-d960-4f3d-a71c-7d82255408a1 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Sampling frequency</td>
        <td>1024.00 Hz</td>
    </tr>



    







    <tr class="mne-repr-section-header channels-7a160a52-f317-4f53-a88c-502945d18e13"
         title="Hide section" 
        onclick="toggleVisibility('channels-7a160a52-f317-4f53-a88c-502945d18e13')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>Channels</strong>
        </th>
    </tr>


    
    <tr class="repr-element channels-7a160a52-f317-4f53-a88c-502945d18e13 ">
        <td class="mne-repr-section-toggle"></td>
        <td>EEG</td>
        <td>
            <button class="mne-ch-names-btn sd-sphinx-override sd-btn sd-btn-info sd-text-wrap sd-shadow-sm" onclick="alert('Good EEG:\n\nFz, Cz, Oz')" title="(Click to open in popup)&#13;&#13;Fz, Cz, Oz">
                3
            </button>

        
        </td>
    </tr>


    <tr class="repr-element channels-7a160a52-f317-4f53-a88c-502945d18e13 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Head & sensor digitization</td>
    
        <td>Not available</td>
    
    </tr>
    







    <tr class="mne-repr-section-header filters-24e00e4b-d82f-4479-b7f3-6648e7cca3c8"
         title="Hide section" 
        onclick="toggleVisibility('filters-24e00e4b-d82f-4479-b7f3-6648e7cca3c8')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>Filters</strong>
        </th>
    </tr>


    <tr class="repr-element filters-24e00e4b-d82f-4479-b7f3-6648e7cca3c8 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Highpass</td>
        <td>0.00 Hz</td>
    </tr>


    <tr class="repr-element filters-24e00e4b-d82f-4479-b7f3-6648e7cca3c8 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Lowpass</td>
        <td>512.00 Hz</td>
    </tr>


    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 123-133

Push/Pull operations
--------------------

For new data to be received, it first need to be pushed on the
:class:`~mne_lsl.lsl.StreamOutlet`. 2 methods are available:

* :meth:`~mne_lsl.lsl.StreamOutlet.push_sample` to push an individual sample of shape
  (n_channels,)
* :meth:`~mne_lsl.lsl.StreamOutlet.push_chunk` to push a chunk of samples of shape
  (n_samples, n_channels)

.. GENERATED FROM PYTHON SOURCE LINES 133-136

.. code-block:: Python


    outlet.push_sample(np.array([1, 2, 3]))








.. GENERATED FROM PYTHON SOURCE LINES 137-144

Once pushed, samples become available at the client end. 2 methods are available to
retrieve samples:

* :meth:`~mne_lsl.lsl.StreamInlet.pull_sample` to pull an individual sample of shape
  (n_channels,)
* :meth:`~mne_lsl.lsl.StreamInlet.pull_chunk` to pull a chunk of samples of shape
  (n_samples, n_channels)

.. GENERATED FROM PYTHON SOURCE LINES 144-152

.. code-block:: Python


    # give a bit of time to the documentation build after the execution of the last cell
    time.sleep(0.01)
    assert inlet.samples_available == 1
    data, ts = inlet.pull_sample()
    assert inlet.samples_available == 0
    data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([1., 2., 3.], dtype=float32)



.. GENERATED FROM PYTHON SOURCE LINES 153-158

LSL clock
---------

The local system timestamp is retrieved with :func:`~mne_lsl.lsl.local_clock`. This
local timestamp can be compared with the LSL timestamp from acquired data.

.. GENERATED FROM PYTHON SOURCE LINES 158-164

.. code-block:: Python


    now = local_clock()
    print(f"Timestamp of the acquired data: {ts}")
    print(f"Current time: {now}")
    print(f"Delta: {now - ts} seconds")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Timestamp of the acquired data: 158.96714712
    Current time: 159.150401376
    Delta: 0.1832542559999979 seconds




.. GENERATED FROM PYTHON SOURCE LINES 165-170

Free resources
--------------

When you are done with a :class:`~mne_lsl.lsl.StreamInlet` or
:class:`~mne_lsl.lsl.StreamOutlet`, don't forget to free the resources they both use.

.. GENERATED FROM PYTHON SOURCE LINES 170-174

.. code-block:: Python


    inlet.close_stream()
    del inlet
    del outlet








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.242 seconds)

**Estimated memory usage:**  192 MB


.. _sphx_glr_download_generated_tutorials_10_low_level_API.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 10_low_level_API.ipynb <10_low_level_API.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 10_low_level_API.py <10_low_level_API.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 10_low_level_API.zip <10_low_level_API.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
