
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated/tutorials/20_stream_meas_info.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_generated_tutorials_20_stream_meas_info.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_tutorials_20_stream_meas_info.py:


Stream information
==================

.. include:: ./../../links.inc

A :class:`~mne_lsl.stream.StreamLSL` will automatically attempt to interpret the channel
names, types and units during the connection with
:meth:`mne_lsl.stream.StreamLSL.connect`.
However, by definition, an LSL stream does not require any of those information to be
present. Moreover, the channel type and unit are not standardize, and may be define with
different nomenclature depending on the system and the application emitting the LSL
stream. For instance, an EEG channel might be denoted by the type ``'eeg'`` or
``'electroencephalography'``, or something else entirely.

If ``MNE-LSL`` is not able to interpret the information in a stream description, it will
default to:

* numbers instead of channel names if it failed to load the channel names, ``'0'```,
  ``'1'``, ... as :func:`mne.create_info` does when the argument ``ch_names`` is
  provided as a number of channels.
* The stream type (if interpretable) or ``'misc'`` otherwise if it failed to load the
  individual channel types.
* SI units (factor 0) if it failed to load the individual channel units.

The stream and channel type supported correspond to the MNE-supported channel types.

.. GENERATED FROM PYTHON SOURCE LINES 30-46

Inspecting a stream info
------------------------

A :class:`~mne_lsl.stream.StreamLSL` measurement information can be inspected with
similar methods to a :class:`~mne.io.Raw` object:
:py:attr:`mne_lsl.stream.StreamLSL.info`,
:py:attr:`mne_lsl.stream.StreamLSL.ch_names`,
:meth:`mne_lsl.stream.StreamLSL.get_channel_types`,
:meth:`mne_lsl.stream.StreamLSL.get_channel_units`.

.. note::

    For this tutorial purposes, a mock LSL stream is created using a
    :class:`~mne_lsl.player.PlayerLSL`. See
    :ref:`sphx_glr_generated_tutorials_10_player.py` for additional information on
    mock LSL streams.

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: default


    from mne_lsl.datasets import sample
    from mne_lsl.player import PlayerLSL as Player
    from mne_lsl.stream import StreamLSL as Stream

    fname = sample.data_path() / "sample-ant-aux-raw.fif"
    player = Player(fname)
    player.start()
    stream = Stream(bufsize=5)  # 5 seconds of buffer
    stream.connect()
    stream.info






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table class="table table-hover table-striped table-sm table-responsive small">
        <tr>
            <th>Measurement date</th>
        
            <td>Unknown</td>
        
        </tr>
        <tr>
            <th>Experimenter</th>
        
            <td>Unknown</td>
        
        </tr>
            <th>Participant</th>
        
            <td>Unknown</td>
        
        </tr>
        <tr>
            <th>Digitized points</th>
        
            <td>Not available</td>
        
        </tr>
        <tr>
            <th>Good channels</th>
            <td>3 EEG, 1 Stimulus</td>
        </tr>
        <tr>
            <th>Bad channels</th>
            <td>None</td>
        </tr>
        <tr>
            <th>EOG channels</th>
            <td>Not available</td>
        </tr>
        <tr>
            <th>ECG channels</th>
            <td>Not available</td>
    
        <tr>
            <th>Sampling frequency</th>
            <td>1024.00 Hz</td>
        </tr>
    
    
        <tr>
            <th>Highpass</th>
            <td>0.00 Hz</td>
        </tr>
    
    
        <tr>
            <th>Lowpass</th>
            <td>512.00 Hz</td>
        </tr>
    
    
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 59-70

:py:attr:`mne_lsl.stream.StreamLSL.ch_names` and
:meth:`mne_lsl.stream.StreamLSL.get_channel_types` behave like their
`MNE <mne stable_>`_ counterpart, but
:meth:`mne_lsl.stream.StreamLSL.get_channel_units` is unique to ``MNE-LSL``.
In `MNE <mne stable_>`_, recordings are expected to be provided in SI units, and it is
up to the end-user to ensure that the underlying data array is abiding.

However, many system do not stream data in SI units. For instance, most EEG amplifiers
stream data in microvolts. ``MNE-LSL`` implements a 'units' API to handle the difference
in units between 2 stream of similar sources, e.g. between an EEG stream from a first
amplifier in microvolts and an EEG stream from a second amplifier in nanovolts.

.. GENERATED FROM PYTHON SOURCE LINES 70-77

.. code-block:: default


    # look at the 3 channels with the type 'eeg'
    ch_types = stream.get_channel_types(picks="eeg")
    ch_units = stream.get_channel_units(picks="eeg")
    for ch_name, ch_type, ch_unit in zip(stream.ch_names, ch_types, ch_units):
        print(f"Channel '{ch_name}' of type '{ch_type}' has the unit '{ch_unit}'.")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Channel 'AUX1' of type 'eeg' has the unit '(107 (FIFF_UNIT_V), 0)'.
    Channel 'AUX2' of type 'eeg' has the unit '(107 (FIFF_UNIT_V), 0)'.
    Channel 'AUX3' of type 'eeg' has the unit '(107 (FIFF_UNIT_V), 0)'.




.. GENERATED FROM PYTHON SOURCE LINES 78-101

In our case, the 3 selected channels have the unit
``((107 (FIFF_UNIT_V), 0 (FIFF_UNITM_NONE))``. This format contains 2 elements:

* The first element, ``107 (FIFF_UNIT_V)``, gives the unit type/family. In this case,
  ``V`` means that the unit type is ``Volts``. Each sensor type is associated to a
  different unit type, thus to change the first element the sensor type must be set
  with :meth:`mne_lsl.stream.StreamLSL.set_channel_types`.
* The second element, ``0 (FIFF_UNITM_NONE))``, gives the unit scale (Giga, Kilo,
  micro, ...) in the form of the power of 10 multiplication factor. In this case,
  ``0`` means ``e0``, i.e. ``10**0``.

Thus, the unit stored is ``Volts``, corresponding to the SI unit for
electrophysiological channels.

Correct a stream info
---------------------

If a :py:attr:`mne_lsl.stream.StreamLSL.info` does not contain the correct attributes,
it should be corrected similarly as for a :class:`~mne.io.Raw` object. In this case:

* the channel ``AUX1`` is a vertical EOG channel.
* the channel ``AUX2`` is an ECG channel.
* the channel ``AUX3`` is an horizontal EOG channel.

.. GENERATED FROM PYTHON SOURCE LINES 101-106

.. code-block:: default


    stream.rename_channels({"AUX1": "vEOG", "AUX2": "ECG", "AUX3": "hEOG"})
    stream.set_channel_types({"vEOG": "eog", "hEOG": "eog", "ECG": "ecg"})
    stream.info






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table class="table table-hover table-striped table-sm table-responsive small">
        <tr>
            <th>Measurement date</th>
        
            <td>Unknown</td>
        
        </tr>
        <tr>
            <th>Experimenter</th>
        
            <td>Unknown</td>
        
        </tr>
            <th>Participant</th>
        
            <td>Unknown</td>
        
        </tr>
        <tr>
            <th>Digitized points</th>
        
            <td>Not available</td>
        
        </tr>
        <tr>
            <th>Good channels</th>
            <td>2 EOG, 1 ECG, 1 Stimulus</td>
        </tr>
        <tr>
            <th>Bad channels</th>
            <td>None</td>
        </tr>
        <tr>
            <th>EOG channels</th>
            <td>vEOG, hEOG</td>
        </tr>
        <tr>
            <th>ECG channels</th>
            <td>ECG</td>
    
        <tr>
            <th>Sampling frequency</th>
            <td>1024.00 Hz</td>
        </tr>
    
    
        <tr>
            <th>Highpass</th>
            <td>0.00 Hz</td>
        </tr>
    
    
        <tr>
            <th>Lowpass</th>
            <td>512.00 Hz</td>
        </tr>
    
    
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 107-108

TODO: section about setting the channel units

.. GENERATED FROM PYTHON SOURCE LINES 110-115

Free resources
--------------
When you are done with a :class:`~mne_lsl.player.PlayerLSL` or
:class:`~mne_lsl.stream.StreamLSL`, don't forget to free the resources they both use
to continuously mock an LSL stream or receive new data from an LSL stream.

.. GENERATED FROM PYTHON SOURCE LINES 115-118

.. code-block:: default


    stream.disconnect()
    player.stop()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [stream_lsl:_acquire:246] ERROR: 'StreamLSL' object has no attribute '_inlet'
    Traceback (most recent call last):
      File "/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/mne_lsl/stream/stream_lsl.py", line 208, in _acquire
        data, timestamps = self._inlet.pull_chunk(timeout=0.0)
    AttributeError: 'StreamLSL' object has no attribute '_inlet'





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.572 seconds)

**Estimated memory usage:**  14 MB


.. _sphx_glr_download_generated_tutorials_20_stream_meas_info.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 20_stream_meas_info.py <20_stream_meas_info.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 20_stream_meas_info.ipynb <20_stream_meas_info.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
